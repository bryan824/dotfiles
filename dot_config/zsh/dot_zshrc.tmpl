#!/usr/bin/env zsh
# zmodload zsh/zprof


# load all files end with .zsh in $ZDOTDIR
for file in $ZDOTDIR/*.zsh; do
  if [[ -f $file ]]; then
    source $file
  fi
done


fpath+=("$ZDOTDIR/completions")
path=(/Applications/WezTerm.app/Contents/MacOS /Applications/kitty.app/Contents/MacOS $PNPM_HOME "$HOME/.cargo/bin" "$HOME/.local/bin" "$XDG_DATA_HOME/nvim/mason/bin" $path)


# Download zimfw plugin manager if missing.
if [[ ! -e ${ZIM_HOME}/zimfw.zsh ]]; then
  curl -fsSL --create-dirs -o ${ZIM_HOME}/zimfw.zsh \
      https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
fi

# Install missing modules and update ${ZIM_HOME}/init.zsh if missing or outdated.
if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZIM_CONFIG_FILE:-${ZDOTDIR:-${HOME}}/.zimrc} ]]; then
  source ${ZIM_HOME}/zimfw.zsh init -q
fi

zstyle ':zim' disable-version-check yes
source ${ZIM_HOME}/init.zsh
# end of zim set up


source ${ZIM_HOME}/modules/zsh-defer/zsh-defer.plugin.zsh

(($+commands[kopia])) && zsh-defer _evalcache kopia --completion-script-zsh
(($+commands[atuin])) && zsh-defer _evalcache atuin init zsh
(($+commands[direnv])) && zsh-defer _evalcache direnv hook zsh
(($+commands[zoxide])) && zsh-defer _evalcache zoxide init zsh
(($+commands[mise])) && zsh-defer _evalcache mise activate zsh
(($+commands[starship])) && _evalcache starship init zsh
(($+commands[tv])) && zsh-defer _evalcache tv init zsh
(($+commands[k9s])) && zsh-defer _evalcache k9s completion zsh

# Activate Powerlevel10k Instant Prompt.
# if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#   source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
# fi
# [[ -f $ZDOTDIR/.p10k.zsh ]] && source $ZDOTDIR/.p10k.zsh


HISTFILE="$ZDOTDIR/.zsh_history"
HISTORY_IGNORE='(cd|ll|lla|lt|d|exit|hist|history|ls|pwd|exit|* --help|h|zsht|.|..|...|....|.....)'
HISTSIZE=1000000000            # infinite command history
SAVEHIST=1000000000            # infinite command history
HISTFILESIZE=1000000000        # infinite command history




#===========================================================================
#                            zstyle
#===========================================================================

# zsh-notify
zstyle ':notify:*' error-title "zsh: Job failed (#{time_elapsed}s)"
zstyle ':notify:*' success-title "zsh: Job finished (#{time_elapsed}s)"
zstyle ':notify:*' activate-terminal yes
zstyle ':notify:*' command-complete-timeout 15



#============================= END OF zstyle ==============================

#===========================================================================
#                            functions
#===========================================================================
function print::warning() { print -Pru2 -- "%F{3}[WARNING]%f: $*"; }
function print::error()   { print -Pru2 -- "%F{1}%B[ERROR]%f%b: $*"; }
function print::debug()   { print -Pru2 -- "%F{4}[DEBUG]%f: $*"; }
function print::info()    { print -Pru2 -- "%F{5}[INFO]%f: $*"; }
function print::notice()  { print -Pru2 -- "%F{13}[NOTICE]%f: $*"; }
function print::success() { print -Pru2 -- "%F{2}%B[SUCCESS]%f%b: $*"; }

whichcomp() {
    for 1; do
        ( print -raC 2 -- $^fpath/${_comps[$1]:?unknown command}(NP*$1*) )
    done
}
from-where() {
    echo $^fpath/$_comps[$1](N)
    whence -v $_comps[$1]
    #which $_comps[$1] 2>&1 | head
}


printcolors() {
  echo -e '\r'
  echo -e '\033[0K\033[1mBold\033[0m \033[7mInvert\033[0m \033[4mUnderline\033[0m'
  echo -e '\033[0K\033[1m\033[7m\033[4mBold & Invert & Underline\033[0m'
  echo
  echo -e '\033[0K\033[31m Red \033[32m Green \033[33m Yellow \033[34m Blue \033[35m Magenta \033[36m Cyan \033[0m'
  echo -e '\033[0K\033[1m\033[4m\033[31m Red \033[32m Green \033[33m Yellow \033[34m Blue \033[35m Magenta \033[36m Cyan \033[0m'
  echo
  echo -e '\033[0K\033[41m Red \033[42m Green \033[43m Yellow \033[44m Blue \033[45m Magenta \033[46m Cyan \033[0m'
  echo -e '\033[0K\033[1m\033[4m\033[41m Red \033[42m Green \033[43m Yellow \033[44m Blue \033[45m Magenta \033[46m Cyan \033[0m'
  echo
  echo -e '\033[0K\033[30m\033[41m Red \033[42m Green \033[43m Yellow \033[44m Blue \033[45m Magenta \033[46m Cyan \033[0m'
  echo -e '\033[0K\033[30m\033[1m\033[4m\033[41m Red \033[42m Green \033[43m Yellow \033[44m Blue \033[45m Magenta \033[46m Cyan \033[0m'
}

# Backup file
bak() {
  cp $1{,.orig}
}

pbcopydir() {
  pwd | tr -d "\r\n" | pbcopy
}

osxnotify() {
    osascript -e 'display notification "'"$*"'"'
}

# git diff before commit
# function gg {
#     br --conf ~/.config/broot/git-diff-conf.toml --git-status
# }

# Delete directory

rmf() {
  mkdir empty_dir
  rsync -a --delete empty_dir/ $1
  rm -rf empty_dir
  rm -rf $1
}

diffd() {
    diff -qr $1 $2 | grep -v -e 'DS_STORE' -e 'Thumbs' | sort
}



#============================= END OF functions ==============================



#===========================================================================
#                            Optional
#===========================================================================

(( $+commands[less] )) && export PAGER="less" && export LESS="RiMQXL" && export LESSCHARSET="utf-8"
(( $+commands[nvim] )) && export EDITOR="nvim" && alias v='nvim' && alias vi="nvim" && alias vim="nvim"
(( $+commands[nix] )) && alias flakeup="nix flake update"
(( $+commands[bat] )) && alias cat='bat --theme="Coldark-Dark" --italic-text=always --style="numbers,changes,header"'
(( $+commands[kitty] )) && alias icat="kitten icat" && alias s="kitten ssh"
# (( $+commands[rustup] )) && alias rust-analyzer="rustup run nighly rust_analyzer"
#============================= END OF Optional ==============================





#===========================================================================
#                            Key Bindings
#===========================================================================
# Trim trailing newline from pasted text
bracketed-paste() {
    # Ref: https://unix.stackexchange.com/questions/693118
    zle .$WIDGET && LBUFFER=${LBUFFER%$'\n'}
}
zle -N bracketed-paste

#============================= END OF Key Bindings ==============================



zstyle ':completion::complete:*' cache-path ${XDG_CACHE_HOME}/zsh/zcompcache



# ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#808080,bold,bg=bold"



# https://github.com/agkozak/dotfiles/blob/master/.zshrc
# https://github.com/NickCrew/zsh-config/blob/master/lib/completion.zsh


{{- if eq .chezmoi.hostname "bryan" }}

export TALOSCONFIG=/Users/bryan/src/ideas/homelab/terraform/output/talos-config.yaml

{{ else if eq .chezmoi.hostname "PRTM-BTu" -}}
if [ -f '$HOME/my/google-cloud-sdk/path.zsh.inc' ]; then . '$HOME/my/google-cloud-sdk/path.zsh.inc'; fi

if [ -f '$HOME/my/google-cloud-sdk/completion.zsh.inc' ]; then . '$HOME/my/google-cloud-sdk/completion.zsh.inc'; fi
{{- end }}
